// Code generated by MockGen. DO NOT EDIT.
// Source: eligibility.go
//
// Generated by this command:
//
//	mockgen -source=eligibility.go -destination ./mocks/eligibility_mocks.go
//

// Package mock_gateway is a generated GoMock package.
package mock_gateway

import (
	context "context"
	reflect "reflect"

	v1 "github.com/utilitywarehouse/energy-contracts/pkg/generated/smart_booking/eligibility/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockEligibilityClient is a mock of EligibilityClient interface.
type MockEligibilityClient struct {
	ctrl     *gomock.Controller
	recorder *MockEligibilityClientMockRecorder
	isgomock struct{}
}

// MockEligibilityClientMockRecorder is the mock recorder for MockEligibilityClient.
type MockEligibilityClientMockRecorder struct {
	mock *MockEligibilityClient
}

// NewMockEligibilityClient creates a new mock instance.
func NewMockEligibilityClient(ctrl *gomock.Controller) *MockEligibilityClient {
	mock := &MockEligibilityClient{ctrl: ctrl}
	mock.recorder = &MockEligibilityClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEligibilityClient) EXPECT() *MockEligibilityClientMockRecorder {
	return m.recorder
}

// GetMeterpointEligibility mocks base method.
func (m *MockEligibilityClient) GetMeterpointEligibility(ctx context.Context, in *v1.GetMeterpointEligibilityRequest, opts ...grpc.CallOption) (*v1.GetMeterpointEligibilityResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMeterpointEligibility", varargs...)
	ret0, _ := ret[0].(*v1.GetMeterpointEligibilityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMeterpointEligibility indicates an expected call of GetMeterpointEligibility.
func (mr *MockEligibilityClientMockRecorder) GetMeterpointEligibility(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeterpointEligibility", reflect.TypeOf((*MockEligibilityClient)(nil).GetMeterpointEligibility), varargs...)
}
