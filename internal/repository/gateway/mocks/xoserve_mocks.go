// Code generated by MockGen. DO NOT EDIT.
// Source: xoserve.go
//
// Generated by this command:
//
//	mockgen -source=xoserve.go -destination ./mocks/xoserve_mocks.go
//

// Package mock_gateway is a generated GoMock package.
package mock_gateway

import (
	context "context"
	reflect "reflect"

	v1 "github.com/utilitywarehouse/energy-contracts/pkg/generated/third_party/xoserve/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockXOServeClient is a mock of XOServeClient interface.
type MockXOServeClient struct {
	ctrl     *gomock.Controller
	recorder *MockXOServeClientMockRecorder
	isgomock struct{}
}

// MockXOServeClientMockRecorder is the mock recorder for MockXOServeClient.
type MockXOServeClientMockRecorder struct {
	mock *MockXOServeClient
}

// NewMockXOServeClient creates a new mock instance.
func NewMockXOServeClient(ctrl *gomock.Controller) *MockXOServeClient {
	mock := &MockXOServeClient{ctrl: ctrl}
	mock.recorder = &MockXOServeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockXOServeClient) EXPECT() *MockXOServeClientMockRecorder {
	return m.recorder
}

// GetSwitchDataByMPRN mocks base method.
func (m *MockXOServeClient) GetSwitchDataByMPRN(arg0 context.Context, arg1 *v1.SearchByMPRNRequest, arg2 ...grpc.CallOption) (*v1.TechnicalDetailsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetSwitchDataByMPRN", varargs...)
	ret0, _ := ret[0].(*v1.TechnicalDetailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSwitchDataByMPRN indicates an expected call of GetSwitchDataByMPRN.
func (mr *MockXOServeClientMockRecorder) GetSwitchDataByMPRN(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSwitchDataByMPRN", reflect.TypeOf((*MockXOServeClient)(nil).GetSwitchDataByMPRN), varargs...)
}
