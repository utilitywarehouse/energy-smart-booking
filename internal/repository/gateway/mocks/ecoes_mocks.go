// Code generated by MockGen. DO NOT EDIT.
// Source: ecoes.go

// Package mock_gateway is a generated GoMock package.
package mock_gateway

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	ecoesv1 "github.com/utilitywarehouse/energy-contracts/pkg/generated/third_party/ecoes/v1"
	grpc "google.golang.org/grpc"
)

// MockEcoesClient is a mock of EcoesClient interface.
type MockEcoesClient struct {
	ctrl     *gomock.Controller
	recorder *MockEcoesClientMockRecorder
}

// MockEcoesClientMockRecorder is the mock recorder for MockEcoesClient.
type MockEcoesClientMockRecorder struct {
	mock *MockEcoesClient
}

// NewMockEcoesClient creates a new mock instance.
func NewMockEcoesClient(ctrl *gomock.Controller) *MockEcoesClient {
	mock := &MockEcoesClient{ctrl: ctrl}
	mock.recorder = &MockEcoesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEcoesClient) EXPECT() *MockEcoesClientMockRecorder {
	return m.recorder
}

// GetRelatedMPANs mocks base method.
func (m *MockEcoesClient) GetRelatedMPANs(arg0 context.Context, arg1 *ecoesv1.SearchByMPANRequest, arg2 ...grpc.CallOption) (*ecoesv1.GetRelatedMPANsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetRelatedMPANs", varargs...)
	ret0, _ := ret[0].(*ecoesv1.GetRelatedMPANsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelatedMPANs indicates an expected call of GetRelatedMPANs.
func (mr *MockEcoesClientMockRecorder) GetRelatedMPANs(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelatedMPANs", reflect.TypeOf((*MockEcoesClient)(nil).GetRelatedMPANs), varargs...)
}

// GetTechnicalDetailsByMPAN mocks base method.
func (m *MockEcoesClient) GetTechnicalDetailsByMPAN(arg0 context.Context, arg1 *ecoesv1.SearchByMPANRequest, arg2 ...grpc.CallOption) (*ecoesv1.TechnicalDetailsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetTechnicalDetailsByMPAN", varargs...)
	ret0, _ := ret[0].(*ecoesv1.TechnicalDetailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTechnicalDetailsByMPAN indicates an expected call of GetTechnicalDetailsByMPAN.
func (mr *MockEcoesClientMockRecorder) GetTechnicalDetailsByMPAN(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTechnicalDetailsByMPAN", reflect.TypeOf((*MockEcoesClient)(nil).GetTechnicalDetailsByMPAN), varargs...)
}
