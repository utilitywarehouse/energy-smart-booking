// Code generated by MockGen. DO NOT EDIT.
// Source: click.go

// Package mock_gateway is a generated GoMock package.
package mock_gateway

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	click "github.com/utilitywarehouse/click.uw.co.uk/generated/contract"
	grpc "google.golang.org/grpc"
)

// MockClickIssuerServiceClient is a mock of ClickIssuerServiceClient interface.
type MockClickIssuerServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockClickIssuerServiceClientMockRecorder
}

// MockClickIssuerServiceClientMockRecorder is the mock recorder for MockClickIssuerServiceClient.
type MockClickIssuerServiceClientMockRecorder struct {
	mock *MockClickIssuerServiceClient
}

// NewMockClickIssuerServiceClient creates a new mock instance.
func NewMockClickIssuerServiceClient(ctrl *gomock.Controller) *MockClickIssuerServiceClient {
	mock := &MockClickIssuerServiceClient{ctrl: ctrl}
	mock.recorder = &MockClickIssuerServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClickIssuerServiceClient) EXPECT() *MockClickIssuerServiceClientMockRecorder {
	return m.recorder
}

// IssueURL mocks base method.
func (m *MockClickIssuerServiceClient) IssueURL(ctx context.Context, in *click.IssueURLRequest, opts ...grpc.CallOption) (*click.IssueURLResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IssueURL", varargs...)
	ret0, _ := ret[0].(*click.IssueURLResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IssueURL indicates an expected call of IssueURL.
func (mr *MockClickIssuerServiceClientMockRecorder) IssueURL(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueURL", reflect.TypeOf((*MockClickIssuerServiceClient)(nil).IssueURL), varargs...)
}
