// Code generated by MockGen. DO NOT EDIT.
// Source: grpc.go
//
// Generated by this command:
//
//	mockgen -source=grpc.go -destination ./mocks/grpc_mocks.go
//

// Package mock_api is a generated GoMock package.
package mock_api

import (
	context "context"
	reflect "reflect"

	v1 "github.com/utilitywarehouse/energy-contracts/pkg/generated/third_party/lowribeck/v1"
	lowribeck "github.com/utilitywarehouse/energy-smart-booking/cmd/lowribeck-api/internal/lowribeck"
	auth "github.com/utilitywarehouse/energy-smart-booking/internal/auth"
	gomock "go.uber.org/mock/gomock"
)

// MockAuth is a mock of Auth interface.
type MockAuth struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMockRecorder
	isgomock struct{}
}

// MockAuthMockRecorder is the mock recorder for MockAuth.
type MockAuthMockRecorder struct {
	mock *MockAuth
}

// NewMockAuth creates a new mock instance.
func NewMockAuth(ctrl *gomock.Controller) *MockAuth {
	mock := &MockAuth{ctrl: ctrl}
	mock.recorder = &MockAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuth) EXPECT() *MockAuthMockRecorder {
	return m.recorder
}

// Authorize mocks base method.
func (m *MockAuth) Authorize(ctx context.Context, params *auth.PolicyParams) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authorize", ctx, params)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authorize indicates an expected call of Authorize.
func (mr *MockAuthMockRecorder) Authorize(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorize", reflect.TypeOf((*MockAuth)(nil).Authorize), ctx, params)
}

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreateBooking mocks base method.
func (m *MockClient) CreateBooking(arg0 context.Context, arg1 *lowribeck.CreateBookingRequest) (*lowribeck.CreateBookingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBooking", arg0, arg1)
	ret0, _ := ret[0].(*lowribeck.CreateBookingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBooking indicates an expected call of CreateBooking.
func (mr *MockClientMockRecorder) CreateBooking(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBooking", reflect.TypeOf((*MockClient)(nil).CreateBooking), arg0, arg1)
}

// CreateBookingPointOfSale mocks base method.
func (m *MockClient) CreateBookingPointOfSale(arg0 context.Context, arg1 *lowribeck.CreateBookingRequest) (*lowribeck.CreateBookingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBookingPointOfSale", arg0, arg1)
	ret0, _ := ret[0].(*lowribeck.CreateBookingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBookingPointOfSale indicates an expected call of CreateBookingPointOfSale.
func (mr *MockClientMockRecorder) CreateBookingPointOfSale(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBookingPointOfSale", reflect.TypeOf((*MockClient)(nil).CreateBookingPointOfSale), arg0, arg1)
}

// GetCalendarAvailability mocks base method.
func (m *MockClient) GetCalendarAvailability(arg0 context.Context, arg1 *lowribeck.GetCalendarAvailabilityRequest) (*lowribeck.GetCalendarAvailabilityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCalendarAvailability", arg0, arg1)
	ret0, _ := ret[0].(*lowribeck.GetCalendarAvailabilityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCalendarAvailability indicates an expected call of GetCalendarAvailability.
func (mr *MockClientMockRecorder) GetCalendarAvailability(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCalendarAvailability", reflect.TypeOf((*MockClient)(nil).GetCalendarAvailability), arg0, arg1)
}

// GetCalendarAvailabilityPointOfSale mocks base method.
func (m *MockClient) GetCalendarAvailabilityPointOfSale(arg0 context.Context, arg1 *lowribeck.GetCalendarAvailabilityRequest) (*lowribeck.GetCalendarAvailabilityResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCalendarAvailabilityPointOfSale", arg0, arg1)
	ret0, _ := ret[0].(*lowribeck.GetCalendarAvailabilityResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCalendarAvailabilityPointOfSale indicates an expected call of GetCalendarAvailabilityPointOfSale.
func (mr *MockClientMockRecorder) GetCalendarAvailabilityPointOfSale(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCalendarAvailabilityPointOfSale", reflect.TypeOf((*MockClient)(nil).GetCalendarAvailabilityPointOfSale), arg0, arg1)
}

// UpdateContactDetails mocks base method.
func (m *MockClient) UpdateContactDetails(arg0 context.Context, arg1 *lowribeck.UpdateContactDetailsRequest) (*lowribeck.UpdateContactDetailsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContactDetails", arg0, arg1)
	ret0, _ := ret[0].(*lowribeck.UpdateContactDetailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContactDetails indicates an expected call of UpdateContactDetails.
func (mr *MockClientMockRecorder) UpdateContactDetails(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContactDetails", reflect.TypeOf((*MockClient)(nil).UpdateContactDetails), arg0, arg1)
}

// MockMapper is a mock of Mapper interface.
type MockMapper struct {
	ctrl     *gomock.Controller
	recorder *MockMapperMockRecorder
	isgomock struct{}
}

// MockMapperMockRecorder is the mock recorder for MockMapper.
type MockMapperMockRecorder struct {
	mock *MockMapper
}

// NewMockMapper creates a new mock instance.
func NewMockMapper(ctrl *gomock.Controller) *MockMapper {
	mock := &MockMapper{ctrl: ctrl}
	mock.recorder = &MockMapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMapper) EXPECT() *MockMapperMockRecorder {
	return m.recorder
}

// AvailabilityRequest mocks base method.
func (m *MockMapper) AvailabilityRequest(arg0 uint32, arg1 *v1.GetAvailableSlotsRequest) *lowribeck.GetCalendarAvailabilityRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AvailabilityRequest", arg0, arg1)
	ret0, _ := ret[0].(*lowribeck.GetCalendarAvailabilityRequest)
	return ret0
}

// AvailabilityRequest indicates an expected call of AvailabilityRequest.
func (mr *MockMapperMockRecorder) AvailabilityRequest(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AvailabilityRequest", reflect.TypeOf((*MockMapper)(nil).AvailabilityRequest), arg0, arg1)
}

// AvailabilityRequestPointOfSale mocks base method.
func (m *MockMapper) AvailabilityRequestPointOfSale(arg0 uint32, arg1 *v1.GetAvailableSlotsPointOfSaleRequest) (*lowribeck.GetCalendarAvailabilityRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AvailabilityRequestPointOfSale", arg0, arg1)
	ret0, _ := ret[0].(*lowribeck.GetCalendarAvailabilityRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AvailabilityRequestPointOfSale indicates an expected call of AvailabilityRequestPointOfSale.
func (mr *MockMapperMockRecorder) AvailabilityRequestPointOfSale(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AvailabilityRequestPointOfSale", reflect.TypeOf((*MockMapper)(nil).AvailabilityRequestPointOfSale), arg0, arg1)
}

// AvailableSlotsPointOfSaleResponse mocks base method.
func (m *MockMapper) AvailableSlotsPointOfSaleResponse(resp *lowribeck.GetCalendarAvailabilityResponse) (*v1.GetAvailableSlotsPointOfSaleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AvailableSlotsPointOfSaleResponse", resp)
	ret0, _ := ret[0].(*v1.GetAvailableSlotsPointOfSaleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AvailableSlotsPointOfSaleResponse indicates an expected call of AvailableSlotsPointOfSaleResponse.
func (mr *MockMapperMockRecorder) AvailableSlotsPointOfSaleResponse(resp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AvailableSlotsPointOfSaleResponse", reflect.TypeOf((*MockMapper)(nil).AvailableSlotsPointOfSaleResponse), resp)
}

// AvailableSlotsResponse mocks base method.
func (m *MockMapper) AvailableSlotsResponse(arg0 *lowribeck.GetCalendarAvailabilityResponse) (*v1.GetAvailableSlotsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AvailableSlotsResponse", arg0)
	ret0, _ := ret[0].(*v1.GetAvailableSlotsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AvailableSlotsResponse indicates an expected call of AvailableSlotsResponse.
func (mr *MockMapperMockRecorder) AvailableSlotsResponse(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AvailableSlotsResponse", reflect.TypeOf((*MockMapper)(nil).AvailableSlotsResponse), arg0)
}

// BookingRequest mocks base method.
func (m *MockMapper) BookingRequest(arg0 uint32, arg1 *v1.CreateBookingRequest) (*lowribeck.CreateBookingRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BookingRequest", arg0, arg1)
	ret0, _ := ret[0].(*lowribeck.CreateBookingRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BookingRequest indicates an expected call of BookingRequest.
func (mr *MockMapperMockRecorder) BookingRequest(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BookingRequest", reflect.TypeOf((*MockMapper)(nil).BookingRequest), arg0, arg1)
}

// BookingRequestPointOfSale mocks base method.
func (m *MockMapper) BookingRequestPointOfSale(arg0 uint32, arg1 *v1.CreateBookingPointOfSaleRequest) (*lowribeck.CreateBookingRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BookingRequestPointOfSale", arg0, arg1)
	ret0, _ := ret[0].(*lowribeck.CreateBookingRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BookingRequestPointOfSale indicates an expected call of BookingRequestPointOfSale.
func (mr *MockMapperMockRecorder) BookingRequestPointOfSale(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BookingRequestPointOfSale", reflect.TypeOf((*MockMapper)(nil).BookingRequestPointOfSale), arg0, arg1)
}

// BookingResponse mocks base method.
func (m *MockMapper) BookingResponse(arg0 *lowribeck.CreateBookingResponse) (*v1.CreateBookingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BookingResponse", arg0)
	ret0, _ := ret[0].(*v1.CreateBookingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BookingResponse indicates an expected call of BookingResponse.
func (mr *MockMapperMockRecorder) BookingResponse(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BookingResponse", reflect.TypeOf((*MockMapper)(nil).BookingResponse), arg0)
}

// BookingResponsePointOfSale mocks base method.
func (m *MockMapper) BookingResponsePointOfSale(resp *lowribeck.CreateBookingResponse) (*v1.CreateBookingPointOfSaleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BookingResponsePointOfSale", resp)
	ret0, _ := ret[0].(*v1.CreateBookingPointOfSaleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BookingResponsePointOfSale indicates an expected call of BookingResponsePointOfSale.
func (mr *MockMapperMockRecorder) BookingResponsePointOfSale(resp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BookingResponsePointOfSale", reflect.TypeOf((*MockMapper)(nil).BookingResponsePointOfSale), resp)
}

// UpdateContactDetailsRequest mocks base method.
func (m *MockMapper) UpdateContactDetailsRequest(arg0 uint32, arg1 *v1.UpdateContactDetailsRequest) *lowribeck.UpdateContactDetailsRequest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContactDetailsRequest", arg0, arg1)
	ret0, _ := ret[0].(*lowribeck.UpdateContactDetailsRequest)
	return ret0
}

// UpdateContactDetailsRequest indicates an expected call of UpdateContactDetailsRequest.
func (mr *MockMapperMockRecorder) UpdateContactDetailsRequest(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContactDetailsRequest", reflect.TypeOf((*MockMapper)(nil).UpdateContactDetailsRequest), arg0, arg1)
}

// UpdateContactDetailsResponse mocks base method.
func (m *MockMapper) UpdateContactDetailsResponse(arg0 *lowribeck.UpdateContactDetailsResponse) (*v1.UpdateContactDetailsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContactDetailsResponse", arg0)
	ret0, _ := ret[0].(*v1.UpdateContactDetailsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContactDetailsResponse indicates an expected call of UpdateContactDetailsResponse.
func (mr *MockMapperMockRecorder) UpdateContactDetailsResponse(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContactDetailsResponse", reflect.TypeOf((*MockMapper)(nil).UpdateContactDetailsResponse), arg0)
}
