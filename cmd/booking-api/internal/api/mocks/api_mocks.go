// Code generated by MockGen. DO NOT EDIT.
// Source: api.go

// Package mock_api is a generated GoMock package.
package mock_api

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	bookingv1 "github.com/utilitywarehouse/energy-contracts/pkg/generated/smart_booking/booking/v1"
	domain "github.com/utilitywarehouse/energy-smart-booking/cmd/booking-api/internal/domain"
	auth "github.com/utilitywarehouse/energy-smart-booking/internal/auth"
	models "github.com/utilitywarehouse/energy-smart-booking/internal/models"
	proto "google.golang.org/protobuf/proto"
)

// MockBookingDomain is a mock of BookingDomain interface.
type MockBookingDomain struct {
	ctrl     *gomock.Controller
	recorder *MockBookingDomainMockRecorder
}

// MockBookingDomainMockRecorder is the mock recorder for MockBookingDomain.
type MockBookingDomainMockRecorder struct {
	mock *MockBookingDomain
}

// NewMockBookingDomain creates a new mock instance.
func NewMockBookingDomain(ctrl *gomock.Controller) *MockBookingDomain {
	mock := &MockBookingDomain{ctrl: ctrl}
	mock.recorder = &MockBookingDomainMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookingDomain) EXPECT() *MockBookingDomainMockRecorder {
	return m.recorder
}

// CreateBooking mocks base method.
func (m *MockBookingDomain) CreateBooking(ctx context.Context, params domain.CreateBookingParams) (domain.CreateBookingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBooking", ctx, params)
	ret0, _ := ret[0].(domain.CreateBookingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBooking indicates an expected call of CreateBooking.
func (mr *MockBookingDomainMockRecorder) CreateBooking(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBooking", reflect.TypeOf((*MockBookingDomain)(nil).CreateBooking), ctx, params)
}

// CreateBookingPointOfSale mocks base method.
func (m *MockBookingDomain) CreateBookingPointOfSale(ctx context.Context, params domain.CreatePOSBookingParams) (domain.CreateBookingPointOfSaleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBookingPointOfSale", ctx, params)
	ret0, _ := ret[0].(domain.CreateBookingPointOfSaleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBookingPointOfSale indicates an expected call of CreateBookingPointOfSale.
func (mr *MockBookingDomainMockRecorder) CreateBookingPointOfSale(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBookingPointOfSale", reflect.TypeOf((*MockBookingDomain)(nil).CreateBookingPointOfSale), ctx, params)
}

// GetAccountAddressByAccountID mocks base method.
func (m *MockBookingDomain) GetAccountAddressByAccountID(ctx context.Context, accountID string) (models.AccountAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountAddressByAccountID", ctx, accountID)
	ret0, _ := ret[0].(models.AccountAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountAddressByAccountID indicates an expected call of GetAccountAddressByAccountID.
func (mr *MockBookingDomainMockRecorder) GetAccountAddressByAccountID(ctx, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountAddressByAccountID", reflect.TypeOf((*MockBookingDomain)(nil).GetAccountAddressByAccountID), ctx, accountID)
}

// GetAvailableSlots mocks base method.
func (m *MockBookingDomain) GetAvailableSlots(ctx context.Context, params domain.GetAvailableSlotsParams) (domain.GetAvailableSlotsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableSlots", ctx, params)
	ret0, _ := ret[0].(domain.GetAvailableSlotsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableSlots indicates an expected call of GetAvailableSlots.
func (mr *MockBookingDomainMockRecorder) GetAvailableSlots(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableSlots", reflect.TypeOf((*MockBookingDomain)(nil).GetAvailableSlots), ctx, params)
}

// GetAvailableSlotsPointOfSale mocks base method.
func (m *MockBookingDomain) GetAvailableSlotsPointOfSale(ctx context.Context, params domain.GetPOSAvailableSlotsParams) (domain.GetAvailableSlotsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableSlotsPointOfSale", ctx, params)
	ret0, _ := ret[0].(domain.GetAvailableSlotsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableSlotsPointOfSale indicates an expected call of GetAvailableSlotsPointOfSale.
func (mr *MockBookingDomainMockRecorder) GetAvailableSlotsPointOfSale(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableSlotsPointOfSale", reflect.TypeOf((*MockBookingDomain)(nil).GetAvailableSlotsPointOfSale), ctx, params)
}

// GetClickLink mocks base method.
func (m *MockBookingDomain) GetClickLink(arg0 context.Context, arg1 domain.GetClickLinkParams) (domain.GetClickLinkResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClickLink", arg0, arg1)
	ret0, _ := ret[0].(domain.GetClickLinkResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClickLink indicates an expected call of GetClickLink.
func (mr *MockBookingDomainMockRecorder) GetClickLink(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClickLink", reflect.TypeOf((*MockBookingDomain)(nil).GetClickLink), arg0, arg1)
}

// GetCustomerBookings mocks base method.
func (m *MockBookingDomain) GetCustomerBookings(ctx context.Context, accountID string) ([]*bookingv1.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerBookings", ctx, accountID)
	ret0, _ := ret[0].([]*bookingv1.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerBookings indicates an expected call of GetCustomerBookings.
func (mr *MockBookingDomainMockRecorder) GetCustomerBookings(ctx, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerBookings", reflect.TypeOf((*MockBookingDomain)(nil).GetCustomerBookings), ctx, accountID)
}

// GetCustomerContactDetails mocks base method.
func (m *MockBookingDomain) GetCustomerContactDetails(ctx context.Context, accountID string) (models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerContactDetails", ctx, accountID)
	ret0, _ := ret[0].(models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerContactDetails indicates an expected call of GetCustomerContactDetails.
func (mr *MockBookingDomainMockRecorder) GetCustomerContactDetails(ctx, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerContactDetails", reflect.TypeOf((*MockBookingDomain)(nil).GetCustomerContactDetails), ctx, accountID)
}

// GetCustomerDetailsPointOfSale mocks base method.
func (m *MockBookingDomain) GetCustomerDetailsPointOfSale(ctx context.Context, accountNumber string) (*models.PointOfSaleCustomerDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCustomerDetailsPointOfSale", ctx, accountNumber)
	ret0, _ := ret[0].(*models.PointOfSaleCustomerDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCustomerDetailsPointOfSale indicates an expected call of GetCustomerDetailsPointOfSale.
func (mr *MockBookingDomainMockRecorder) GetCustomerDetailsPointOfSale(ctx, accountNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCustomerDetailsPointOfSale", reflect.TypeOf((*MockBookingDomain)(nil).GetCustomerDetailsPointOfSale), ctx, accountNumber)
}

// ProcessEligibility mocks base method.
func (m *MockBookingDomain) ProcessEligibility(arg0 context.Context, arg1 domain.ProcessEligibilityParams) (domain.ProcessEligibilityResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessEligibility", arg0, arg1)
	ret0, _ := ret[0].(domain.ProcessEligibilityResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessEligibility indicates an expected call of ProcessEligibility.
func (mr *MockBookingDomainMockRecorder) ProcessEligibility(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessEligibility", reflect.TypeOf((*MockBookingDomain)(nil).ProcessEligibility), arg0, arg1)
}

// RescheduleBooking mocks base method.
func (m *MockBookingDomain) RescheduleBooking(ctx context.Context, params domain.RescheduleBookingParams) (domain.RescheduleBookingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RescheduleBooking", ctx, params)
	ret0, _ := ret[0].(domain.RescheduleBookingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RescheduleBooking indicates an expected call of RescheduleBooking.
func (mr *MockBookingDomainMockRecorder) RescheduleBooking(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RescheduleBooking", reflect.TypeOf((*MockBookingDomain)(nil).RescheduleBooking), ctx, params)
}

// MockSmartMeterInterestDomain is a mock of SmartMeterInterestDomain interface.
type MockSmartMeterInterestDomain struct {
	ctrl     *gomock.Controller
	recorder *MockSmartMeterInterestDomainMockRecorder
}

// MockSmartMeterInterestDomainMockRecorder is the mock recorder for MockSmartMeterInterestDomain.
type MockSmartMeterInterestDomainMockRecorder struct {
	mock *MockSmartMeterInterestDomain
}

// NewMockSmartMeterInterestDomain creates a new mock instance.
func NewMockSmartMeterInterestDomain(ctrl *gomock.Controller) *MockSmartMeterInterestDomain {
	mock := &MockSmartMeterInterestDomain{ctrl: ctrl}
	mock.recorder = &MockSmartMeterInterestDomainMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSmartMeterInterestDomain) EXPECT() *MockSmartMeterInterestDomainMockRecorder {
	return m.recorder
}

// RegisterInterest mocks base method.
func (m *MockSmartMeterInterestDomain) RegisterInterest(arg0 context.Context, arg1 domain.RegisterInterestParams) (*domain.SmartMeterInterest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterInterest", arg0, arg1)
	ret0, _ := ret[0].(*domain.SmartMeterInterest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterInterest indicates an expected call of RegisterInterest.
func (mr *MockSmartMeterInterestDomainMockRecorder) RegisterInterest(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterInterest", reflect.TypeOf((*MockSmartMeterInterestDomain)(nil).RegisterInterest), arg0, arg1)
}

// MockPublisher is a mock of Publisher interface.
type MockPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockPublisherMockRecorder
}

// MockPublisherMockRecorder is the mock recorder for MockPublisher.
type MockPublisherMockRecorder struct {
	mock *MockPublisher
}

// NewMockPublisher creates a new mock instance.
func NewMockPublisher(ctrl *gomock.Controller) *MockPublisher {
	mock := &MockPublisher{ctrl: ctrl}
	mock.recorder = &MockPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPublisher) EXPECT() *MockPublisherMockRecorder {
	return m.recorder
}

// Sink mocks base method.
func (m *MockPublisher) Sink(ctx context.Context, proto proto.Message, at time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sink", ctx, proto, at)
	ret0, _ := ret[0].(error)
	return ret0
}

// Sink indicates an expected call of Sink.
func (mr *MockPublisherMockRecorder) Sink(ctx, proto, at interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sink", reflect.TypeOf((*MockPublisher)(nil).Sink), ctx, proto, at)
}

// MockAuth is a mock of Auth interface.
type MockAuth struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMockRecorder
}

// MockAuthMockRecorder is the mock recorder for MockAuth.
type MockAuthMockRecorder struct {
	mock *MockAuth
}

// NewMockAuth creates a new mock instance.
func NewMockAuth(ctrl *gomock.Controller) *MockAuth {
	mock := &MockAuth{ctrl: ctrl}
	mock.recorder = &MockAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuth) EXPECT() *MockAuthMockRecorder {
	return m.recorder
}

// Authorize mocks base method.
func (m *MockAuth) Authorize(ctx context.Context, params *auth.PolicyParams) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authorize", ctx, params)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authorize indicates an expected call of Authorize.
func (mr *MockAuthMockRecorder) Authorize(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorize", reflect.TypeOf((*MockAuth)(nil).Authorize), ctx, params)
}

// MockaccountIder is a mock of accountIder interface.
type MockaccountIder struct {
	ctrl     *gomock.Controller
	recorder *MockaccountIderMockRecorder
}

// MockaccountIderMockRecorder is the mock recorder for MockaccountIder.
type MockaccountIderMockRecorder struct {
	mock *MockaccountIder
}

// NewMockaccountIder creates a new mock instance.
func NewMockaccountIder(ctrl *gomock.Controller) *MockaccountIder {
	mock := &MockaccountIder{ctrl: ctrl}
	mock.recorder = &MockaccountIderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockaccountIder) EXPECT() *MockaccountIderMockRecorder {
	return m.recorder
}

// GetAccountId mocks base method.
func (m *MockaccountIder) GetAccountId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountId")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAccountId indicates an expected call of GetAccountId.
func (mr *MockaccountIderMockRecorder) GetAccountId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountId", reflect.TypeOf((*MockaccountIder)(nil).GetAccountId))
}

// MockaccountNumberer is a mock of accountNumberer interface.
type MockaccountNumberer struct {
	ctrl     *gomock.Controller
	recorder *MockaccountNumbererMockRecorder
}

// MockaccountNumbererMockRecorder is the mock recorder for MockaccountNumberer.
type MockaccountNumbererMockRecorder struct {
	mock *MockaccountNumberer
}

// NewMockaccountNumberer creates a new mock instance.
func NewMockaccountNumberer(ctrl *gomock.Controller) *MockaccountNumberer {
	mock := &MockaccountNumberer{ctrl: ctrl}
	mock.recorder = &MockaccountNumbererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockaccountNumberer) EXPECT() *MockaccountNumbererMockRecorder {
	return m.recorder
}

// GetAccountNumber mocks base method.
func (m *MockaccountNumberer) GetAccountNumber() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountNumber")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAccountNumber indicates an expected call of GetAccountNumber.
func (mr *MockaccountNumbererMockRecorder) GetAccountNumber() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountNumber", reflect.TypeOf((*MockaccountNumberer)(nil).GetAccountNumber))
}
