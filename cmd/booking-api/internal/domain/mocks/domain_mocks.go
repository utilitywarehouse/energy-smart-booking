// Code generated by MockGen. DO NOT EDIT.
// Source: domain.go
//
// Generated by this command:
//
//	mockgen -source=domain.go -destination ./mocks/domain_mocks.go
//

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	context "context"
	reflect "reflect"

	v1 "github.com/utilitywarehouse/energy-contracts/pkg/generated/smart_booking/booking/v1"
	v10 "github.com/utilitywarehouse/energy-contracts/pkg/generated/third_party/lowribeck/v1"
	models "github.com/utilitywarehouse/energy-smart-booking/internal/models"
	gateway "github.com/utilitywarehouse/energy-smart-booking/internal/repository/gateway"
	gomock "go.uber.org/mock/gomock"
)

// MockAccountGateway is a mock of AccountGateway interface.
type MockAccountGateway struct {
	ctrl     *gomock.Controller
	recorder *MockAccountGatewayMockRecorder
	isgomock struct{}
}

// MockAccountGatewayMockRecorder is the mock recorder for MockAccountGateway.
type MockAccountGatewayMockRecorder struct {
	mock *MockAccountGateway
}

// NewMockAccountGateway creates a new mock instance.
func NewMockAccountGateway(ctrl *gomock.Controller) *MockAccountGateway {
	mock := &MockAccountGateway{ctrl: ctrl}
	mock.recorder = &MockAccountGatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountGateway) EXPECT() *MockAccountGatewayMockRecorder {
	return m.recorder
}

// GetAccountByAccountID mocks base method.
func (m *MockAccountGateway) GetAccountByAccountID(ctx context.Context, accountID string) (models.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByAccountID", ctx, accountID)
	ret0, _ := ret[0].(models.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByAccountID indicates an expected call of GetAccountByAccountID.
func (mr *MockAccountGatewayMockRecorder) GetAccountByAccountID(ctx, accountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByAccountID", reflect.TypeOf((*MockAccountGateway)(nil).GetAccountByAccountID), ctx, accountID)
}

// MockAccountNumberGateway is a mock of AccountNumberGateway interface.
type MockAccountNumberGateway struct {
	ctrl     *gomock.Controller
	recorder *MockAccountNumberGatewayMockRecorder
	isgomock struct{}
}

// MockAccountNumberGatewayMockRecorder is the mock recorder for MockAccountNumberGateway.
type MockAccountNumberGatewayMockRecorder struct {
	mock *MockAccountNumberGateway
}

// NewMockAccountNumberGateway creates a new mock instance.
func NewMockAccountNumberGateway(ctrl *gomock.Controller) *MockAccountNumberGateway {
	mock := &MockAccountNumberGateway{ctrl: ctrl}
	mock.recorder = &MockAccountNumberGatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountNumberGateway) EXPECT() *MockAccountNumberGatewayMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockAccountNumberGateway) Get(ctx context.Context, accountID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, accountID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAccountNumberGatewayMockRecorder) Get(ctx, accountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAccountNumberGateway)(nil).Get), ctx, accountID)
}

// MockOccupancyStore is a mock of OccupancyStore interface.
type MockOccupancyStore struct {
	ctrl     *gomock.Controller
	recorder *MockOccupancyStoreMockRecorder
	isgomock struct{}
}

// MockOccupancyStoreMockRecorder is the mock recorder for MockOccupancyStore.
type MockOccupancyStoreMockRecorder struct {
	mock *MockOccupancyStore
}

// NewMockOccupancyStore creates a new mock instance.
func NewMockOccupancyStore(ctrl *gomock.Controller) *MockOccupancyStore {
	mock := &MockOccupancyStore{ctrl: ctrl}
	mock.recorder = &MockOccupancyStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOccupancyStore) EXPECT() *MockOccupancyStoreMockRecorder {
	return m.recorder
}

// GetOccupancyByAccountID mocks base method.
func (m *MockOccupancyStore) GetOccupancyByAccountID(arg0 context.Context, arg1 string) (*models.Occupancy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOccupancyByAccountID", arg0, arg1)
	ret0, _ := ret[0].(*models.Occupancy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOccupancyByAccountID indicates an expected call of GetOccupancyByAccountID.
func (mr *MockOccupancyStoreMockRecorder) GetOccupancyByAccountID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOccupancyByAccountID", reflect.TypeOf((*MockOccupancyStore)(nil).GetOccupancyByAccountID), arg0, arg1)
}

// GetSiteExternalReferenceByAccountID mocks base method.
func (m *MockOccupancyStore) GetSiteExternalReferenceByAccountID(ctx context.Context, accountID string) (*models.Site, *models.OccupancyEligibility, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSiteExternalReferenceByAccountID", ctx, accountID)
	ret0, _ := ret[0].(*models.Site)
	ret1, _ := ret[1].(*models.OccupancyEligibility)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSiteExternalReferenceByAccountID indicates an expected call of GetSiteExternalReferenceByAccountID.
func (mr *MockOccupancyStoreMockRecorder) GetSiteExternalReferenceByAccountID(ctx, accountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSiteExternalReferenceByAccountID", reflect.TypeOf((*MockOccupancyStore)(nil).GetSiteExternalReferenceByAccountID), ctx, accountID)
}

// MockSiteStore is a mock of SiteStore interface.
type MockSiteStore struct {
	ctrl     *gomock.Controller
	recorder *MockSiteStoreMockRecorder
	isgomock struct{}
}

// MockSiteStoreMockRecorder is the mock recorder for MockSiteStore.
type MockSiteStoreMockRecorder struct {
	mock *MockSiteStore
}

// NewMockSiteStore creates a new mock instance.
func NewMockSiteStore(ctrl *gomock.Controller) *MockSiteStore {
	mock := &MockSiteStore{ctrl: ctrl}
	mock.recorder = &MockSiteStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSiteStore) EXPECT() *MockSiteStoreMockRecorder {
	return m.recorder
}

// GetSiteByOccupancyID mocks base method.
func (m *MockSiteStore) GetSiteByOccupancyID(ctx context.Context, occupancyID string) (*models.Site, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSiteByOccupancyID", ctx, occupancyID)
	ret0, _ := ret[0].(*models.Site)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSiteByOccupancyID indicates an expected call of GetSiteByOccupancyID.
func (mr *MockSiteStoreMockRecorder) GetSiteByOccupancyID(ctx, occupancyID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSiteByOccupancyID", reflect.TypeOf((*MockSiteStore)(nil).GetSiteByOccupancyID), ctx, occupancyID)
}

// MockLowriBeckGateway is a mock of LowriBeckGateway interface.
type MockLowriBeckGateway struct {
	ctrl     *gomock.Controller
	recorder *MockLowriBeckGatewayMockRecorder
	isgomock struct{}
}

// MockLowriBeckGatewayMockRecorder is the mock recorder for MockLowriBeckGateway.
type MockLowriBeckGatewayMockRecorder struct {
	mock *MockLowriBeckGateway
}

// NewMockLowriBeckGateway creates a new mock instance.
func NewMockLowriBeckGateway(ctrl *gomock.Controller) *MockLowriBeckGateway {
	mock := &MockLowriBeckGateway{ctrl: ctrl}
	mock.recorder = &MockLowriBeckGatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLowriBeckGateway) EXPECT() *MockLowriBeckGatewayMockRecorder {
	return m.recorder
}

// CreateBooking mocks base method.
func (m *MockLowriBeckGateway) CreateBooking(ctx context.Context, postcode, reference string, slot models.BookingSlot, contactDetails models.AccountDetails, vulnerabilities []v10.Vulnerability, other string) (gateway.CreateBookingResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBooking", ctx, postcode, reference, slot, contactDetails, vulnerabilities, other)
	ret0, _ := ret[0].(gateway.CreateBookingResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBooking indicates an expected call of CreateBooking.
func (mr *MockLowriBeckGatewayMockRecorder) CreateBooking(ctx, postcode, reference, slot, contactDetails, vulnerabilities, other any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBooking", reflect.TypeOf((*MockLowriBeckGateway)(nil).CreateBooking), ctx, postcode, reference, slot, contactDetails, vulnerabilities, other)
}

// CreateBookingPointOfSale mocks base method.
func (m *MockLowriBeckGateway) CreateBookingPointOfSale(ctx context.Context, mpan, mprn string, tariffElectricity, tariffGas v10.TariffType, slot models.BookingSlot, contactDetails models.AccountDetails, vulnerabilities []v10.Vulnerability, other string, siteAddress models.AccountAddress) (gateway.CreateBookingPointOfSaleResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBookingPointOfSale", ctx, mpan, mprn, tariffElectricity, tariffGas, slot, contactDetails, vulnerabilities, other, siteAddress)
	ret0, _ := ret[0].(gateway.CreateBookingPointOfSaleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBookingPointOfSale indicates an expected call of CreateBookingPointOfSale.
func (mr *MockLowriBeckGatewayMockRecorder) CreateBookingPointOfSale(ctx, mpan, mprn, tariffElectricity, tariffGas, slot, contactDetails, vulnerabilities, other, siteAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBookingPointOfSale", reflect.TypeOf((*MockLowriBeckGateway)(nil).CreateBookingPointOfSale), ctx, mpan, mprn, tariffElectricity, tariffGas, slot, contactDetails, vulnerabilities, other, siteAddress)
}

// GetAvailableSlots mocks base method.
func (m *MockLowriBeckGateway) GetAvailableSlots(ctx context.Context, postcode, reference string) (gateway.AvailableSlotsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableSlots", ctx, postcode, reference)
	ret0, _ := ret[0].(gateway.AvailableSlotsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableSlots indicates an expected call of GetAvailableSlots.
func (mr *MockLowriBeckGatewayMockRecorder) GetAvailableSlots(ctx, postcode, reference any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableSlots", reflect.TypeOf((*MockLowriBeckGateway)(nil).GetAvailableSlots), ctx, postcode, reference)
}

// GetAvailableSlotsPointOfSale mocks base method.
func (m *MockLowriBeckGateway) GetAvailableSlotsPointOfSale(ctx context.Context, postcode, mpan, mprn string, tariffElectricity, tariffGas v10.TariffType) (gateway.AvailableSlotsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableSlotsPointOfSale", ctx, postcode, mpan, mprn, tariffElectricity, tariffGas)
	ret0, _ := ret[0].(gateway.AvailableSlotsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableSlotsPointOfSale indicates an expected call of GetAvailableSlotsPointOfSale.
func (mr *MockLowriBeckGatewayMockRecorder) GetAvailableSlotsPointOfSale(ctx, postcode, mpan, mprn, tariffElectricity, tariffGas any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableSlotsPointOfSale", reflect.TypeOf((*MockLowriBeckGateway)(nil).GetAvailableSlotsPointOfSale), ctx, postcode, mpan, mprn, tariffElectricity, tariffGas)
}

// MockEligibilityGateway is a mock of EligibilityGateway interface.
type MockEligibilityGateway struct {
	ctrl     *gomock.Controller
	recorder *MockEligibilityGatewayMockRecorder
	isgomock struct{}
}

// MockEligibilityGatewayMockRecorder is the mock recorder for MockEligibilityGateway.
type MockEligibilityGatewayMockRecorder struct {
	mock *MockEligibilityGateway
}

// NewMockEligibilityGateway creates a new mock instance.
func NewMockEligibilityGateway(ctrl *gomock.Controller) *MockEligibilityGateway {
	mock := &MockEligibilityGateway{ctrl: ctrl}
	mock.recorder = &MockEligibilityGatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEligibilityGateway) EXPECT() *MockEligibilityGatewayMockRecorder {
	return m.recorder
}

// GetMeterpointEligibility mocks base method.
func (m *MockEligibilityGateway) GetMeterpointEligibility(ctx context.Context, mpan, mprn, postcode string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMeterpointEligibility", ctx, mpan, mprn, postcode)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMeterpointEligibility indicates an expected call of GetMeterpointEligibility.
func (mr *MockEligibilityGatewayMockRecorder) GetMeterpointEligibility(ctx, mpan, mprn, postcode any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMeterpointEligibility", reflect.TypeOf((*MockEligibilityGateway)(nil).GetMeterpointEligibility), ctx, mpan, mprn, postcode)
}

// MockClickGateway is a mock of ClickGateway interface.
type MockClickGateway struct {
	ctrl     *gomock.Controller
	recorder *MockClickGatewayMockRecorder
	isgomock struct{}
}

// MockClickGatewayMockRecorder is the mock recorder for MockClickGateway.
type MockClickGatewayMockRecorder struct {
	mock *MockClickGateway
}

// NewMockClickGateway creates a new mock instance.
func NewMockClickGateway(ctrl *gomock.Controller) *MockClickGateway {
	mock := &MockClickGateway{ctrl: ctrl}
	mock.recorder = &MockClickGatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClickGateway) EXPECT() *MockClickGatewayMockRecorder {
	return m.recorder
}

// GenerateAuthenticated mocks base method.
func (m *MockClickGateway) GenerateAuthenticated(ctx context.Context, accountNo string, attributes map[string]string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateAuthenticated", ctx, accountNo, attributes)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateAuthenticated indicates an expected call of GenerateAuthenticated.
func (mr *MockClickGatewayMockRecorder) GenerateAuthenticated(ctx, accountNo, attributes any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAuthenticated", reflect.TypeOf((*MockClickGateway)(nil).GenerateAuthenticated), ctx, accountNo, attributes)
}

// MockBookingStore is a mock of BookingStore interface.
type MockBookingStore struct {
	ctrl     *gomock.Controller
	recorder *MockBookingStoreMockRecorder
	isgomock struct{}
}

// MockBookingStoreMockRecorder is the mock recorder for MockBookingStore.
type MockBookingStoreMockRecorder struct {
	mock *MockBookingStore
}

// NewMockBookingStore creates a new mock instance.
func NewMockBookingStore(ctrl *gomock.Controller) *MockBookingStore {
	mock := &MockBookingStore{ctrl: ctrl}
	mock.recorder = &MockBookingStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookingStore) EXPECT() *MockBookingStoreMockRecorder {
	return m.recorder
}

// GetBookingByBookingID mocks base method.
func (m *MockBookingStore) GetBookingByBookingID(ctx context.Context, bookingID string) (models.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookingByBookingID", ctx, bookingID)
	ret0, _ := ret[0].(models.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookingByBookingID indicates an expected call of GetBookingByBookingID.
func (mr *MockBookingStoreMockRecorder) GetBookingByBookingID(ctx, bookingID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookingByBookingID", reflect.TypeOf((*MockBookingStore)(nil).GetBookingByBookingID), ctx, bookingID)
}

// GetBookingsByAccountID mocks base method.
func (m *MockBookingStore) GetBookingsByAccountID(ctx context.Context, accountID string) ([]models.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookingsByAccountID", ctx, accountID)
	ret0, _ := ret[0].([]models.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookingsByAccountID indicates an expected call of GetBookingsByAccountID.
func (mr *MockBookingStoreMockRecorder) GetBookingsByAccountID(ctx, accountID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookingsByAccountID", reflect.TypeOf((*MockBookingStore)(nil).GetBookingsByAccountID), ctx, accountID)
}

// MockPartialBookingStore is a mock of PartialBookingStore interface.
type MockPartialBookingStore struct {
	ctrl     *gomock.Controller
	recorder *MockPartialBookingStoreMockRecorder
	isgomock struct{}
}

// MockPartialBookingStoreMockRecorder is the mock recorder for MockPartialBookingStore.
type MockPartialBookingStoreMockRecorder struct {
	mock *MockPartialBookingStore
}

// NewMockPartialBookingStore creates a new mock instance.
func NewMockPartialBookingStore(ctrl *gomock.Controller) *MockPartialBookingStore {
	mock := &MockPartialBookingStore{ctrl: ctrl}
	mock.recorder = &MockPartialBookingStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPartialBookingStore) EXPECT() *MockPartialBookingStoreMockRecorder {
	return m.recorder
}

// Upsert mocks base method.
func (m *MockPartialBookingStore) Upsert(ctx context.Context, bookingID string, event *v1.BookingCreatedEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", ctx, bookingID, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockPartialBookingStoreMockRecorder) Upsert(ctx, bookingID, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockPartialBookingStore)(nil).Upsert), ctx, bookingID, event)
}

// MockPointOfSaleCustomerDetailsStore is a mock of PointOfSaleCustomerDetailsStore interface.
type MockPointOfSaleCustomerDetailsStore struct {
	ctrl     *gomock.Controller
	recorder *MockPointOfSaleCustomerDetailsStoreMockRecorder
	isgomock struct{}
}

// MockPointOfSaleCustomerDetailsStoreMockRecorder is the mock recorder for MockPointOfSaleCustomerDetailsStore.
type MockPointOfSaleCustomerDetailsStoreMockRecorder struct {
	mock *MockPointOfSaleCustomerDetailsStore
}

// NewMockPointOfSaleCustomerDetailsStore creates a new mock instance.
func NewMockPointOfSaleCustomerDetailsStore(ctrl *gomock.Controller) *MockPointOfSaleCustomerDetailsStore {
	mock := &MockPointOfSaleCustomerDetailsStore{ctrl: ctrl}
	mock.recorder = &MockPointOfSaleCustomerDetailsStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPointOfSaleCustomerDetailsStore) EXPECT() *MockPointOfSaleCustomerDetailsStoreMockRecorder {
	return m.recorder
}

// GetByAccountNumber mocks base method.
func (m *MockPointOfSaleCustomerDetailsStore) GetByAccountNumber(arg0 context.Context, arg1 string) (*models.PointOfSaleCustomerDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByAccountNumber", arg0, arg1)
	ret0, _ := ret[0].(*models.PointOfSaleCustomerDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAccountNumber indicates an expected call of GetByAccountNumber.
func (mr *MockPointOfSaleCustomerDetailsStoreMockRecorder) GetByAccountNumber(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAccountNumber", reflect.TypeOf((*MockPointOfSaleCustomerDetailsStore)(nil).GetByAccountNumber), arg0, arg1)
}

// Upsert mocks base method.
func (m *MockPointOfSaleCustomerDetailsStore) Upsert(arg0 context.Context, arg1 string, arg2 models.PointOfSaleCustomerDetails) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockPointOfSaleCustomerDetailsStoreMockRecorder) Upsert(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockPointOfSaleCustomerDetailsStore)(nil).Upsert), arg0, arg1, arg2)
}

// MockSmartMeterInterestStore is a mock of SmartMeterInterestStore interface.
type MockSmartMeterInterestStore struct {
	ctrl     *gomock.Controller
	recorder *MockSmartMeterInterestStoreMockRecorder
	isgomock struct{}
}

// MockSmartMeterInterestStoreMockRecorder is the mock recorder for MockSmartMeterInterestStore.
type MockSmartMeterInterestStoreMockRecorder struct {
	mock *MockSmartMeterInterestStore
}

// NewMockSmartMeterInterestStore creates a new mock instance.
func NewMockSmartMeterInterestStore(ctrl *gomock.Controller) *MockSmartMeterInterestStore {
	mock := &MockSmartMeterInterestStore{ctrl: ctrl}
	mock.recorder = &MockSmartMeterInterestStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSmartMeterInterestStore) EXPECT() *MockSmartMeterInterestStoreMockRecorder {
	return m.recorder
}

// Insert mocks base method.
func (m *MockSmartMeterInterestStore) Insert(ctx context.Context, smartMeterInterest models.SmartMeterInterest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, smartMeterInterest)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockSmartMeterInterestStoreMockRecorder) Insert(ctx, smartMeterInterest any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockSmartMeterInterestStore)(nil).Insert), ctx, smartMeterInterest)
}
