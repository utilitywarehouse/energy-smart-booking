// Code generated by MockGen. DO NOT EDIT.
// Source: partial_booking.go
//
// Generated by this command:
//
//	mockgen -source=partial_booking.go -destination ./mocks/partial_booking_mocks.go
//

// Package mock_workers is a generated GoMock package.
package mock_workers

import (
	context "context"
	reflect "reflect"
	time "time"

	v1 "github.com/utilitywarehouse/energy-contracts/pkg/generated/smart_booking/booking/v1"
	models "github.com/utilitywarehouse/energy-smart-booking/internal/models"
	gomock "go.uber.org/mock/gomock"
	proto "google.golang.org/protobuf/proto"
)

// MockBookingPublisher is a mock of BookingPublisher interface.
type MockBookingPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockBookingPublisherMockRecorder
	isgomock struct{}
}

// MockBookingPublisherMockRecorder is the mock recorder for MockBookingPublisher.
type MockBookingPublisherMockRecorder struct {
	mock *MockBookingPublisher
}

// NewMockBookingPublisher creates a new mock instance.
func NewMockBookingPublisher(ctrl *gomock.Controller) *MockBookingPublisher {
	mock := &MockBookingPublisher{ctrl: ctrl}
	mock.recorder = &MockBookingPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookingPublisher) EXPECT() *MockBookingPublisherMockRecorder {
	return m.recorder
}

// Sink mocks base method.
func (m *MockBookingPublisher) Sink(ctx context.Context, proto proto.Message, at time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sink", ctx, proto, at)
	ret0, _ := ret[0].(error)
	return ret0
}

// Sink indicates an expected call of Sink.
func (mr *MockBookingPublisherMockRecorder) Sink(ctx, proto, at any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sink", reflect.TypeOf((*MockBookingPublisher)(nil).Sink), ctx, proto, at)
}

// MockOccupancyStore is a mock of OccupancyStore interface.
type MockOccupancyStore struct {
	ctrl     *gomock.Controller
	recorder *MockOccupancyStoreMockRecorder
	isgomock struct{}
}

// MockOccupancyStoreMockRecorder is the mock recorder for MockOccupancyStore.
type MockOccupancyStoreMockRecorder struct {
	mock *MockOccupancyStore
}

// NewMockOccupancyStore creates a new mock instance.
func NewMockOccupancyStore(ctrl *gomock.Controller) *MockOccupancyStore {
	mock := &MockOccupancyStore{ctrl: ctrl}
	mock.recorder = &MockOccupancyStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOccupancyStore) EXPECT() *MockOccupancyStoreMockRecorder {
	return m.recorder
}

// GetOccupancyByAccountID mocks base method.
func (m *MockOccupancyStore) GetOccupancyByAccountID(arg0 context.Context, arg1 string) (*models.Occupancy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOccupancyByAccountID", arg0, arg1)
	ret0, _ := ret[0].(*models.Occupancy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOccupancyByAccountID indicates an expected call of GetOccupancyByAccountID.
func (mr *MockOccupancyStoreMockRecorder) GetOccupancyByAccountID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOccupancyByAccountID", reflect.TypeOf((*MockOccupancyStore)(nil).GetOccupancyByAccountID), arg0, arg1)
}

// MockPartialBookingStore is a mock of PartialBookingStore interface.
type MockPartialBookingStore struct {
	ctrl     *gomock.Controller
	recorder *MockPartialBookingStoreMockRecorder
	isgomock struct{}
}

// MockPartialBookingStoreMockRecorder is the mock recorder for MockPartialBookingStore.
type MockPartialBookingStoreMockRecorder struct {
	mock *MockPartialBookingStore
}

// NewMockPartialBookingStore creates a new mock instance.
func NewMockPartialBookingStore(ctrl *gomock.Controller) *MockPartialBookingStore {
	mock := &MockPartialBookingStore{ctrl: ctrl}
	mock.recorder = &MockPartialBookingStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPartialBookingStore) EXPECT() *MockPartialBookingStoreMockRecorder {
	return m.recorder
}

// GetPending mocks base method.
func (m *MockPartialBookingStore) GetPending(ctx context.Context) ([]*models.PartialBooking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPending", ctx)
	ret0, _ := ret[0].([]*models.PartialBooking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPending indicates an expected call of GetPending.
func (mr *MockPartialBookingStoreMockRecorder) GetPending(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPending", reflect.TypeOf((*MockPartialBookingStore)(nil).GetPending), ctx)
}

// MarkAsDeleted mocks base method.
func (m *MockPartialBookingStore) MarkAsDeleted(ctx context.Context, bookingID string, reason models.DeletionReason) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkAsDeleted", ctx, bookingID, reason)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkAsDeleted indicates an expected call of MarkAsDeleted.
func (mr *MockPartialBookingStoreMockRecorder) MarkAsDeleted(ctx, bookingID, reason any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkAsDeleted", reflect.TypeOf((*MockPartialBookingStore)(nil).MarkAsDeleted), ctx, bookingID, reason)
}

// UpdateRetries mocks base method.
func (m *MockPartialBookingStore) UpdateRetries(ctx context.Context, bookingID string, retries int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRetries", ctx, bookingID, retries)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRetries indicates an expected call of UpdateRetries.
func (mr *MockPartialBookingStoreMockRecorder) UpdateRetries(ctx, bookingID, retries any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRetries", reflect.TypeOf((*MockPartialBookingStore)(nil).UpdateRetries), ctx, bookingID, retries)
}

// Upsert mocks base method.
func (m *MockPartialBookingStore) Upsert(ctx context.Context, bookingID string, event *v1.BookingCreatedEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", ctx, bookingID, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockPartialBookingStoreMockRecorder) Upsert(ctx, bookingID, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockPartialBookingStore)(nil).Upsert), ctx, bookingID, event)
}
